---
import Section from "./Section.astro";
---

<Section
	name="Background"
	info="Your image that will show up, make sure the object is in the center because it will cropped to fit the screen ðŸ“±"
	class="w-full grid grid-cols-3 gap-4">
	<div class="col-span-2 flex flex-col space-y-2 w-full">
		<span class="text-sm font-semibold text-neutral-content opacity-50">Image</span>
		<div class="relative w-full h-32">
			<div class="w-full h-full absolute -z-10 bg-cover bg-center rounded-lg bg-no-repeat" id="imagepreview"></div>
			<input
				type="file"
				name="image"
				id="image"
				accept="image/jpeg,image/png,image/webp"
				class="w-full h-full opacity-0 absolute top-0 left-0 cursor-pointer z-0"
			/>
			<label
				for="image"
				id="imageLabel"
				class="w-full h-full border-success border-2 border-dashed rounded-lg flex items-center justify-center text-center text-base-content cursor-pointer z-10">
				<span> Click or bring it here ðŸ‘Œ</span>
			</label>
		</div>
	</div>

	<div class="flex flex-col space-y-2 w-full">
		<span class="text-sm font-semibold text-neutral-content opacity-50">Color</span>
		<div class="flex items-center justify-start gap-4 w-full h-full rounded-lg border-neutral border-2">
			<input type="color" name="bg-color" id="bg-color" class="hidden" />
			<label
				for="bg-color"
				class="cursor-pointer w-full h-full flex-col flex items-center justify-center text-base-content rounded-xl text-center"
				id="colorTarget">
				<span>ðŸŽ¨</span>
				<span>Get your color</span>
			</label>
		</div>
	</div>
</Section>

<script>
	import { pageState } from "../store/store";

	const colorTarget: HTMLElement = document.getElementById("colorTarget")!;
	const colorInput: HTMLInputElement = document.getElementById("bg-color")! as HTMLInputElement;
	const imageInput: HTMLInputElement = document.getElementById("image")! as HTMLInputElement;
	const imagePreview: HTMLElement = document.getElementById("imagepreview")!;

	document.onload = () => {
		colorInput.value = colorTarget.style.backgroundColor;
	};


	colorInput.addEventListener("change", (e) => {
		pageState.setKey('color', colorInput.value);
		colorTarget.style.backgroundColor = colorInput.value;
	});

	imageInput.addEventListener("change", async () => {
		let image = imageInput.files![0];
		if (!image) return;
		let imageBuffer = await image.arrayBuffer();
		let base64String = btoa(new Uint8Array(imageBuffer).reduce((data, byte) => data + String.fromCharCode(byte), ""));

		let base64Image =  `data:image/png;base64,${base64String}`;

		imagePreview.style.backgroundImage = `url(${base64Image})`;
		imagePreview.classList.add("border-2", "border-neutral");
		document.getElementById("imageLabel")!.classList.add("hidden");

		pageState.setKey('image', base64Image)
	});

</script>
