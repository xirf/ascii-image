---
import Block from "../components/Block.astro";
import Header from "../components/Header.astro";
import Settings from "../components/Settings.astro";
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/clover.png" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>ACI - Image behid text</title>
	</head>
	<body class="h-screen w-full lg:overflow-hidden flex flex-col relative lg:flex-row">
		<div class="w-full p-2 h-[90vh] duration-500 transition-all ease-in-out shrink-0 lg:shrink lg:h-screen">
			<div class="h-full box-border relative flex flex-col bg-base-200 rounded-xl">
				<div class="items-center px-4 hidden lg:flex lg:gap-2 ">
					<div class="flex items-center gap-2 p-4 opacity-50 grow cursor-pointer">
						{["#FF5F56", "#FFBD2E", "#27C93F"].map((el) => <div class="w-4 h-4 rounded-xl" style={`background: ${el}`} />)}
					</div>
					<div class="w-96 max-w-sm p-2 box-border">
						<div class="input h-10 border-1 border-neutral flex items-center justify-center">https://aci.andka.me/üçÄ</div>
					</div>
					<div class="grow"></div>
				</div>
				<div class="lg:p-2 grow overflow-hidden">
					<div class="preview h-full rounded-xl overflow-hidden">
						<div id="preview-template" class="w-full h-full">
							<div class="w-full h-full flex-col flex items-center justify-center relative bg-base-300 p-8">
								<div class="max-w-xl text-center grid gap-4">
									<p class="text-9xl">üçÄ</p>
									<h1 class="text-3xl font-bold">Let's start by messing around with panel</h1>
									<p>
										this just a tool to help you create images with text behind them. this project is completely open source and
										you can find the <a href="https://github.com/xirf/ascii-image" target="_blank" class="text-success"
											>source code here</a
										>.
									</p>
									<p class="lg:hidden text-xs opacity-75 mt-16">
										Scroll down to see the panel
									</p>
								</div>
								<div class="absolute bottom-10 opacity-50 text-xs">
									Made by <a href="https://github.com/xirf" target="_blank" class="text-success" rel="noopener noreferrer">xirf</a>
									 with
									<a href="https://astro.build" target="_blank" rel="noopener noreferrer" class="text-warning">Astro</a> and <a
										href="http://daisyui.com"
										class="text-success"
										target="_blank"
										rel="noopener noreferrer">DaisyUI</a
									>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<section class="w-full shrink-0 lg:max-w-md h-screen flex flex-col bg-base-100 ">
			<Header />
			<Settings />
		</section>
	</body>
</html>

<script>
	import { pageState, buttonState } from "../store/store";

	// Add some spice
	window.history.replaceState({}, "", `/üçÄ`);

	const previewWindow = document.querySelector(".preview")! as HTMLElement;
	const previewTemplate = document.querySelector("#preview-template")! as HTMLElement;

	/* Calculate the approximate character needed to fill the view
	 * to do this we can use use canvas element and simulate it on that
	 */
	function calculateCharacterToFill(text: string, fontSize: number, lineHeight: number, width: number, height: number, family: string) {
		const canvas = document.createElement("canvas");
		const ctx = canvas.getContext("2d")!;
		ctx.font = `${fontSize}px ${family.replaceAll(" ", "-").toLowerCase()}`;
		const textWidth = ctx.measureText(text).width;
		const textHeight = fontSize * lineHeight;
		const textArea = textWidth * textHeight;
		const area = width * height;
		const characters = Math.floor(area / textArea);
		return characters;
	}

	let inittial = JSON.stringify(pageState.get());
	pageState.subscribe((state) => {
		// just to prevent imediate update
		if (JSON.stringify(state) != inittial) update(state);
	});

	function update(state: ReturnType<typeof pageState.get>) {
		const { image, color, text, fontSize, fontFamily, lineHeight, align } = state;
		const characterToFill = calculateCharacterToFill(
			text,
			fontSize,
			lineHeight,
			previewTemplate.clientWidth,
			previewTemplate.clientHeight,
			fontFamily
		);
		previewTemplate.innerText = text.repeat(characterToFill + 1);

		/* Using classlist maybe better but it simpler to write it like this
		 * this also easier to maintenance because it like wrinting css (i know this is css)
		 */
		previewTemplate.setAttribute(
			"style",
			`
			width: 100%;
			height: 100%;
			font-size: ${fontSize}px;
			font-family: ${fontFamily};
			text-align: ${align};
    		overflow: hidden;
    		background: transparent url(${image}) center / cover no-repeat text;
    		color: transparent;
			white-space: break-spaces;
    		word-break: break-all;
			line-height: ${lineHeight};
			`
		);
		previewWindow.style.backgroundColor = color;
	}



</script>
