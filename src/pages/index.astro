---
import Layout from "../layouts/Default.astro";
import Header from "../components/Header.astro";
import Settings from "../components/Settings.astro";
import { Icon } from "astro-icon";
---

<Layout className={"h-screen w-full lg:overflow-hidden flex flex-col relative lg:flex-row"}>
	<div class="w-full p-2 h-[90vh] duration-500 transition-all ease-in-out shrink-0 lg:shrink lg:h-screen">
		<div class="h-full box-border relative flex flex-col bg-base-200 rounded-xl">
			<div class="items-center px-4 hidden lg:flex lg:gap-2">
				<div class="flex items-center gap-2 p-4 opacity-50 grow cursor-pointer">
					{["#FF5F56", "#FFBD2E", "#27C93F"].map((el) => <div class="w-4 h-4 rounded-xl" style={`background: ${el}`} />)}
				</div>
				<div class="w-96 max-w-sm p-2 box-border">
					<div class="input h-10 border-1 border-neutral flex items-center justify-center">https://aci.andka.me/üçÄ</div>
				</div>
				<div class="grow"></div>
			</div>
			<div class="lg:p-2 grow overflow-hidden">
				<div class="preview h-full rounded-xl overflow-hidden">
					<div id="preview-template" class="w-full h-full">
						<div class="w-full h-full flex-col flex items-center justify-center relative bg-base-300 p-8">
							<div class="max-w-xl text-center grid gap-4">
								<p class="text-9xl">üçÄ</p>
								<h1 class="text-3xl font-bold">Let's start by messing around with panel</h1>
								<p>
									this just a tool to help you create images with text behind them. this project is completely open source and you
									can find the <a href="https://github.com/xirf/ascii-image" target="_blank" class="text-success"
										>source code here</a
									>.
								</p>
								<p class="lg:hidden text-xs opacity-75 mt-16">Scroll down to see the panel</p>
							</div>
							<div class="absolute bottom-10 opacity-50 text-xs">
								Made by <a href="https://github.com/xirf" target="_blank" class="text-success" rel="noopener noreferrer">xirf</a>
								 with
								<a href="https://astro.build" target="_blank" rel="noopener noreferrer" class="text-warning">Astro</a> and <a
									href="http://daisyui.com"
									class="text-success"
									target="_blank"
									rel="noopener noreferrer">DaisyUI</a
								>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	<section class="w-full shrink-0 lg:max-w-md h-screen flex flex-col bg-base-100">
		<Header />
		<Settings />
	</section>

	<dialog id="modal" class="modal modal-bottom sm:modal-middle">
		<div class="modal-box text-center">
			<div class="success hidden" id="loadingModal">
				<h3 class="font-bold text-xl">Please Wait üòá</h3>
				<p class="py-4 max-w-md">
					We are uploading your image to our server, this may take a while depending on your internet connection. Please be patient.
				</p>
				<span class="loading loading-dots loading-lg"></span>
			</div>
			<div class="success hidden" id="successModal">
				<h3 class="font-bold text-xl">Upload Complete ü•≥</h3>
				<p class="py-4 max-w-md">Here is your url, click to copy and share it with others.</p>
				<div class="join w-full">
					<input class="input input-bordered join-item select-all w-full" value="https://index" id="successLink" />
					<button class="btn join-item col-span-2" id="copyButton">
						<Icon name="lucide:copy" size="16" />
						<span>Copy</span>
					</button>
				</div>
				<div class="grid grid-cols-2 gap-4 mt-8">
					<a href="/history" class="btn btn-neutral"> üëÄ History</a>
					<button class="btn btn-success" id="closeButton"> ‚ú® Kembali</button>
				</div>
			</div>
		</div>
	</dialog>
</Layout>

<script>
	import { pageState, buttonState } from "../store/store";
	import calculateCharacterToFill from "../utils/calculateCharacterToFill";

	const previewWindow = document.querySelector(".preview")! as HTMLElement;
	const previewTemplate = document.querySelector("#preview-template")! as HTMLElement;
	const modal = document.querySelector("#modal")! as HTMLDialogElement;
	const loadingModal = document.querySelector("#loadingModal")! as HTMLElement;
	const successModal = document.querySelector("#successModal")! as HTMLElement;
	const successLink = document.querySelector("#successLink")! as HTMLInputElement;
	const copyButton = document.querySelector("#copyButton")! as HTMLButtonElement;
	const closeButton = document.querySelector("#closeButton")! as HTMLButtonElement;

	// Add some spice
	window.history.replaceState({}, "", `/üçÄ`);

	let inittial = JSON.stringify(pageState.get());
	pageState.subscribe((state) => {
		// just to prevent imediate update
		if (JSON.stringify(state) != inittial) update(state);
	});

	function update(state: ReturnType<typeof pageState.get>) {
		const { image, color, text, fontSize, fontFamily, lineHeight, align } = state;
		const characterToFill = calculateCharacterToFill({
			text,
			fontSize,
			lineHeight,
			width: previewTemplate.clientWidth,
			height: previewTemplate.clientHeight,
			family: fontFamily,
		});
		previewTemplate.innerText = text.repeat(characterToFill + 1);

		/* Using classlist maybe better but it simpler to write it like this
		 * this also easier to maintenance because it like wrinting css (i know this is css)
		 */
		previewTemplate.setAttribute(
			"style",
			`
			width: 100%;
			height: 100%;
			font-size: ${fontSize}px;
			font-family: ${fontFamily};
			text-align: ${align};
    		overflow: hidden;
    		background: transparent url(${image}) center / cover no-repeat text;
    		color: transparent;
			white-space: break-spaces;
    		word-break: break-all;
			line-height: ${lineHeight};
			`
		);
		previewWindow.style.backgroundColor = color;
	}

	async function upload() {
		let imageBB = "https://api.imgbb.com/1/upload?expiration=15552000&key=74fa7bfc7bc9c140a0f5cd912b677412";
		modal.classList.add("modal-open");
		loadingModal.classList.remove("hidden");
		successModal.classList.add("hidden");
		const { image, color, text, fontSize, fontFamily, lineHeight, align } = pageState.get();
		let blob = dataURItoBlob(image);

		const formData = new FormData();
		formData.append("image", blob, "image.png");

		const response = await fetch(imageBB, {
			method: "POST",
			body: formData,
		});

		if (response.status < 200 || response.status > 299) {
			alert("Something went wrong, please try again later");
			return;
		}

		const { data } = await response.json();
		const imageUrl = data.thumb.url;

		successLink.value = "";

		let uid = localStorage.getItem("uid") || crypto.randomUUID();

		let res = await fetch("/api/upload", {
			method: "POST",
			body: JSON.stringify({
				image: imageUrl,
				uid: uid,
				color: color,
				text: text,
				fontSize: fontSize,
				fontFamily: fontFamily,
				lineHeight: lineHeight,
				align: align,
			}),
			headers: {
				"Content-Type": "application/json",
			},
		});

		if (res.status < 200 || res.status > 299) {
			alert("Something went wrong, please try again later");
			return;
		}

		let { url: finalUrl } = (await res.json())[0];

		localStorage.setItem("uid", uid);
		successLink.value = window.location.origin + "/" + finalUrl;

		modal.classList.remove("modal-open");
		modal.classList.add("modal-open");
		loadingModal.classList.add("hidden");
		successModal.classList.remove("hidden");
	}

	function dataURItoBlob(dataURI: string) {
		// convert base64 to raw binary data held in a string
		// doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this
		var byteString = atob(dataURI.split(",")[1]);

		// separate out the mime component
		var mimeString = dataURI.split(",")[0].split(":")[1].split(";")[0];

		// write the bytes of the string to an ArrayBuffer
		var ab = new ArrayBuffer(byteString.length);

		// create a view into the buffer
		var ia = new Uint8Array(ab);

		// set the bytes of the buffer to the correct values
		for (var i = 0; i < byteString.length; i++) {
			ia[i] = byteString.charCodeAt(i);
		}

		// write the ArrayBuffer to a blob, and you're done
		var blob = new Blob([ab], { type: mimeString });
		return blob;
	}

	async function copy() {
		await navigator.clipboard.writeText(successLink.value);
		copyButton.querySelector("span")!.innerText = "Copied!";
		setTimeout(() => {
			copyButton.querySelector("span")!.innerText = "Copy";
		}, 1000);
	}

	buttonState.listen((_, change) => {
		if (change == "save") upload();
	});

	closeButton.addEventListener("click", () => {
		modal.classList.remove("modal-open");
	});

	copyButton.addEventListener("click", copy);
</script>
